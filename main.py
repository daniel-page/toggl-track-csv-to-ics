"""

A program that converts a *.csv file generated by Toggl Track (detailed report)
to a *.ics file. This can then be imported into a calendar.

"""


import pandas as pd
import icalendar as ical
import os


class Converter:
    """Convert csv files to ics files"""

    def __init__(self, output_name="output.ics"):
        self.output_name = output_name

    def init_ics_calendar(self):
        """Initialises an ics calendar"""
        cal = ical.Calendar()
        cal.add("prodid", "Toggl Track Entries")
        cal.add("version", "2.0")
        return cal

    def read_csv_files(self):
        """Reads csv files in the directory as a list of pandas dataframes"""
        dfs = []
        for file in os.listdir("."):
            if file.endswith(".csv"):
                df = self.read_csv_file(file)
                dfs.append(df)
                # print(file)
        return dfs

    def read_csv_file(self, file):
        """Reads a single csv file and returns a pandas dataframe"""
        df = pd.read_csv(
            file,
            parse_dates=[
                ["Start date", "Start time"],
                ["End date", "End time"]
            ]
        )
        return df

    def add_events(self, cal, dfs):
        """Adds events to an ics calendar one or more pandas dataframes"""
        for j in range(len(dfs)):
            projects = list(dfs[j]["Project"])
            descriptions = list(dfs[j]["Description"])
            start_dates = list(dfs[j]["Start date_Start time"])
            end_dates = list(dfs[j]["End date_End time"])
            for i in range(len(dfs[j])):
                self.add_event(cal, projects[i], descriptions[i], start_dates[i], end_dates[i])

    def add_event(self, cal, project, description, start_date, end_date):
        """Adds a single event to an ics calendar"""
        event = ical.Event()
        event.add("summary", project)
        event.add("description", description)
        event.add("dtstart", start_date)
        event.add("dtend", end_date)
        cal.add_component(event)

    def write_ics_file(self, cal):
        """Write an ics calendar to a file"""
        f = open(self.output_name, "wb")
        f.write(cal.to_ical())
        f.close()

    def convert(self):
        """Runs the conversion process"""
        cal = self.init_ics_calendar()
        dfs = self.read_csv_files()
        self.add_events(cal, dfs)
        self.write_ics_file(cal)


Converter().convert()
